// SPDX-License-Identifier: GPL-2.0

// this is the combination of refpolicy2 device, storage, and terminal modules

//
// Groups of devices
//

@alias(ptynode)
virtual resource pty inherits terminal {
    /// Virtual for PTY devices.

    devpts_t.associate(this);

    fn read(domain source) {
        /// Read this PTY.
        this<character_device>.read(source);
        devpts_t.list(source);
    }

    fn dontaudit_read(domain source) {
        /// Do not audit denials for reading this PTY.
        this<character_device>.dontaudit_read(source);
        devpts_t.dontaudit_list(source);
    }

    fn append(domain source) {
        /// Append this PTY.
        this<character_device>.append(source);
        devpts_t.list(source);
    }

    fn dontaudit_append(domain source) {
        /// Do not audit denials for appending this PTY.
        this<character_device>.dontaudit_append(source);
        devpts_t.dontaudit_list(source);
    }

    fn write(domain source) {
        /// Write this PTY.
        this<character_device>.write(source);
        devpts_t.list(source);
    }

    fn dontaudit_write(domain source) {
        /// Do not audit denials for writing this PTY.
        this<character_device>.dontaudit_write(source);
        devpts_t.dontaudit_list(source);
    }

    fn rw(domain source) {
        /// Read and write this PTY.
        this<character_device>.rw(source);
        devpts_t.list(source);
    }

    fn dontaudit_rw(domain source) {
        /// Do not audit denials for reading and for writing this PTY.
        this<character_device>.dontaudit_rw(source);
        devpts_t.dontaudit_list(source);
    }
}

virtual resource serial_device inherits common_character_device {
    /// Virtual for serial devices.
}

@alias(server_ptynode)
virtual resource login_pty inherits ptynode {
    /// Virtual for login PTY devices.
}

virtual resource terminal inherits common_character_device {
    /// Virtual for terminals (TTYs and PTYs)
}

@alias(ttynode)
virtual resource tty inherits serial_device, terminal {
    /// Virtual for TTY devices.
}

// TODO: assertions
//attribute fixed_disk_raw_read;
//attribute fixed_disk_raw_write;
//attribute scsi_generic_read;
//attribute scsi_generic_write;

//
// Concrete types
//

resource agp_device_t inherits common_character_device {
    /// The /dev/agpgart device.
    file_context("/dev/(misc/)?agpgart", chr_file, this);
}

resource acpi_bios_t inherits common_character_device {
    /// The /dev/apm_bios device.
    file_context("/dev/apm_bios", chr_file, this);
    file_context("/dev/snapshot", chr_file, this);
    file_context("/dev/wmi/dell-smbios", chr_file, this);
}

resource autofs_device_t inherits common_character_device {
    /// The /dev/autofs* devices.
    file_context("/dev/autofs.*", chr_file, this);
}

resource bsdpty_device_t inherits common_character_device {
    /// The /dev/[pt]ty[a-ep-z][0-9a-f] and /dev/pty/* devices.
    file_context("/dev/[pt]ty[a-ep-z][0-9a-f]", chr_file, this);

    file_context("/dev/pty/.*", chr_file, this);
}

resource cachefiles_device_t inherits common_character_device {
    /// The /dev/cachefiles device.
    file_context("/dev/cachefiles", chr_file, this);
}

resource clock_device_t inherits common_character_device {
    /// Real-time clock devices, such as /dev/rtc and /dev/hpet.
    file_context("/dev/efirtc", chr_file, this);
    file_context("/dev/gtrsc.*", chr_file, this);
    file_context("/dev/hpet", chr_file, this);
    file_context("/dev/pcfclock.*", chr_file, this);
    file_context("/dev/pps.*", chr_file, this);
    file_context("/dev/ptp[0-9]*", chr_file, this);
    file_context("/dev/(misc/)?rtc[0-9]*", chr_file, this);
}

@alias(smartcard_device_t)
resource cmx_device_t inherits common_character_device {
    /// Cisco Connected Mobile Experiences (CMX) devices, /dev/cmx*.
    file_context("/dev/cmx.*", chr_file, this);
}

resource console_device_t inherits terminal {
    /// The /dev/console device.
    file_context("/dev/console", chr_file, this);
}

resource cpu_device_t inherits common_character_device {
    /// CPU control devices such as /dev/microcode and /dev/cpu*.
    file_context("/dev/microcode", chr_file, this);
    file_context("/dev/msr.*", chr_file, this);
    file_context("/dev/cpu.*", chr_file, this);
}

resource crash_device_t inherits common_character_device {
    /// The /dev/crash device.
    file_context("/dev/crash", chr_file, system_u:object_r:crash_device_t:mls_systemhigh);
}

resource crypt_device_t inherits common_character_device {
    /// The IBM zSeries z90crypt hardware ssl accelerator.
    file_context("/dev/z90crypt", chr_file, this);
}

resource dax_device_t inherits common_character_device {
    /// Filesystem direct access devices, /dev/dax*.*.
    file_context("/dev/dax[0-9]\.[0-9]", chr_file, system_u:object_r:dax_device_t:mls_systemhigh);
}

@hint(class=[file fifo_file sock_file blk_file chr_file], hint="Only directories and symlinks should have this label. This may indicate mislabeled files.")
resource device_t inherits filesystem, mountpoint, common_dir {
    /// The /dev directory.
    /// This consists of the /dev directory and symlinks.  Other classes of files,
    /// especially character devices and block devices, should not have this label.

    file_context("/etc/udev/devices", dir, this);

    file_context("/dev", dir, this);
    file_context("/dev/.*", any, this);

    // used by init scripts to initially populate udev /dev
    file_context("/usr/lib/udev/devices(/.*)?", any, this);

    if (distro_debian) {
        // this is a static /dev dir "backup mount"
        // if you want to disable udev, you will have to boot permissive and relabel!
        file_context("/dev/\.static", dir, this);
        file_context("/dev/\.static/dev", dir, this);
        // TODO add back in when we figure out what to do with none
        // file_context("/dev/\.static/dev/.+", <<none>>);
    }

    fs_use_trans(devtmpfs);

    systemd_tmpfiles_t.manager_of(this);
}
// container_mountpoint(device_t)

resource devtty_t inherits common_character_device {
    /// The /dev/tty devices.
    file_context("/dev/tty", chr_file, this);
}
//mls_trusted_object(devtty_t)

resource dlm_control_device_t inherits common_character_device {
    /// The /dev/misc/dlm* devices.
    file_context("/dev/misc/dlm.*", chr_file, this);
}

resource dri_device_t inherits common_character_device {
    /// Graphics card direct rendering interfaces, such as /dev/dri/*.
    file_context("/dev/i915", chr_file, this);
    file_context("/dev/radeon", chr_file, this);
    file_context("/dev/dri/.+", chr_file, this);
}

resource event_device_t inherits common_character_device {
    /// Event devices, such as /dev/event*.
    file_context("/dev/event.*", chr_file, this);
    file_context("/dev/lik.*", chr_file, this);
    file_context("/dev/uinput", chr_file, this);
    file_context("/dev/biometric/sensor.*", chr_file, this);

    file_context("/dev/input/.*", chr_file, this);
    file_context("/dev/input/keyboard.*", chr_file, this);
    file_context("/dev/input/event.*", chr_file, this);
    file_context("/dev/input/uinput", chr_file, this);
}

resource fixed_disk_device_t inherits common_block_device, common_character_device {
    /// Fixed storage devices, including MD and LVM devices.
    /// Accessing these devices should be avoided. By accessing the device,
    /// a domain can bypass SELinux access controls for filesystems.

    file_context("/dev/\.tmp-block-.*", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/[shmxv]d[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/dasd[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/dasd[^/]*", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/dm-[0-9]+", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/drbd[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/etherd/.+", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/flash[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/initrd", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/jsfd", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/jsflash", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/loop.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/lvm", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/mtd.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/mtd.*", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/nb[^/]+", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/ng[0-9]+n[0-9]+", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/nvme[0-9]+", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/nvme[0-9]n[^/]+", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/pmem[0-9]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/ps3d.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/ram.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/(raw/)?rawctl", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/rd.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/tw[a-z][^/]+", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/ubd[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/vd[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/xvd[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/zd.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/zfs", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/zpios", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/zram[0-9]+", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/ataraid/.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/cciss/[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/i2o/hd[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/ida/[^/]*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/md/.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    file_context("/dev/mapper/.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/device-mapper", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/raw/raw[0-9]+", chr_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/dev/scramdisk/.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    file_context("/usr/lib/udev/devices/loop.*", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);

    if (distro_redhat) {
        file_context("/dev/root", blk_file, system_u:object_r:fixed_disk_device_t:mls_systemhigh);
    }
}
// TODO:
// neverallow ~{ fixed_disk_raw_read storage_unconfined_type } fixed_disk_device_t:{ chr_file blk_file } read;
// neverallow ~{ fixed_disk_raw_write storage_unconfined_type } fixed_disk_device_t:{ chr_file blk_file } { append write };

resource framebuf_device_t inherits common_character_device {
    /// Graphics framebuffer devices, /dev/fb*
    file_context("/dev/fb[0-9]*", chr_file, this);
}

resource freefall_device_t inherits common_character_device {
    /// The freefall detection device, /dev/freefall.
    file_context("/dev/freefall", chr_file, this);
}

resource fuse_device_t inherits common_character_device {
    /// The FUSE device, /dev/fuse.
    file_context("/dev/fuse", chr_file, this);
    file_context("/usr/lib/udev/devices/fuse", chr_file, this);
}

resource gpiochip_device_t inherits common_character_device {
    /// General purpose IO devices, /dev/gpiochip*.
    file_context("/dev/gpiochip[0-9]", chr_file, this);
}

resource ipmi_device_t inherits common_character_device {
    /// IPMI devices, /dev/ipmi/*
    file_context("/dev/ipmi[0-9]+", chr_file, this);
    file_context("/dev/ipmi/[0-9]+", chr_file, this);
}

resource hyperv_kvp_device_t inherits common_character_device {
    /// Hyper-V key-value pair device.
    file_context("/dev/vmbus/hv_kvp", chr_file, this);
}

resource hyperv_vss_device_t inherits common_character_device {
    /// Hyper-V Volume Shadow Copy Service device.
    file_context("/dev/vmbus/hv_vss", chr_file, this);
}

resource infiniband_device_t inherits common_character_device {
    /// Type for /dev/infiniband/*
    file_context("/dev/infiniband/.*", chr_file, this);
}

resource kmsg_device_t inherits common_character_device {
    /// Kernel message devices, /dev/kmsg and /dev/mcelog.
    file_context("/dev/kmsg", chr_file, system_u:object_r:kmsg_device_t:mls_systemhigh);
    file_context("/dev/mcelog", chr_file, system_u:object_r:kmsg_device_t:mls_systemhigh);
}
//optional_policy(`
//    init_mountpoint(kmsg_device_t)
//')

resource ksm_device_t inherits common_character_device {
    /// The kernel same-page merging device, /dev/ksm.
    file_context("/dev/ksm", chr_file, this);
}

@alias(qemu_device_t)
resource kvm_device_t inherits common_character_device {
    /// The kernel virtual machine device, /dev/ksm.
    file_context("/dev/kvm", chr_file, this);
    file_context("/dev/kqemu", chr_file, this);
}

resource lirc_device_t inherits common_character_device {
    /// The infared remote control devices, /dev/lirc*.
    file_context("/dev/lirc[0-9]+", chr_file, this);
}

resource loop_control_device_t inherits common_character_device {
    /// The loopback control device, /dev/loop-control.
    file_context("/dev/loop-control", chr_file, this);
}

resource lvm_control_t inherits common_character_device {
    /// Device mapper control devices.
    file_context("/dev/btrfs-control", chr_file, this);
    file_context("/dev/etherd/.+", chr_file, this);
    file_context("/dev/mapper/control", chr_file, this);
}

resource mei_device_t inherits common_character_device {
    /// Intel(R) management engine interfaces, /dev/mei*.
    file_context("/dev/mei[0-9]*", chr_file, this);
}

resource memory_device_t inherits common_character_device, cap_sys_rawio_checks {
    /// Memory devices, such as /dev/mem and /dev/kmem.
    /// Reading and writing these devices should be avoided as much as possible.
    /// By accessing the device, a domain can bypass SELinux access controls
    /// for processes.
    file_context("/dev/kmem", chr_file, system_u:object_r:memory_device_t:mls_systemhigh);
    file_context("/dev/mem", chr_file, system_u:object_r:memory_device_t:mls_systemhigh);
    file_context("/dev/mergemem", chr_file, system_u:object_r:memory_device_t:mls_systemhigh);
    file_context("/dev/oldmem", chr_file, system_u:object_r:memory_device_t:mls_systemhigh);
    file_context("/dev/port", chr_file, system_u:object_r:memory_device_t:mls_systemhigh);
}
// TODO:
//neverallow ~{ memory_raw_read devices_unconfined_type } memory_device_t:{ chr_file blk_file } read;
//neverallow ~{ memory_raw_write devices_unconfined_type } memory_device_t:{ chr_file blk_file } { append write };

resource modem_device_t inherits common_character_device {
    /// The modem device, /dev/modem.
    // TODO: Should this merge into ppp_device_t?
    file_context("/dev/modem", chr_file, this);
    file_context("/dev/noz.*", chr_file, this);
}

resource mouse_device_t inherits common_character_device {
    /// Mouse devices, such as /dev/input/mice and /dev/misc/psaux.
    file_context("/dev/.*mouse.*", chr_file, this);
    file_context("/dev/atibm", chr_file, this);
    file_context("/dev/elographics/e2201", chr_file, this);
    file_context("/dev/inportbm", chr_file, this);
    file_context("/dev/jbm", chr_file, this);
    file_context("/dev/js.*", chr_file, this);
    file_context("/dev/lircm", chr_file, this);
    file_context("/dev/logibm", chr_file, this);
    file_context("/dev/mice", chr_file, this);
    file_context("/dev/pc110pad", chr_file, this);
    file_context("/dev/(misc/)?psaux", chr_file, this);
    file_context("/dev/vrtpanel", chr_file, this);
    file_context("/dev/input/m.*", chr_file, this);
    file_context("/dev/input/.*mouse.*", chr_file, this);
    file_context("/dev/input/mice", chr_file, this);
    file_context("/dev/input/js.*", chr_file, this);
    file_context("/dev/touchscreen/ucb1x00", chr_file, this);
    file_context("/dev/touchscreen/mk712", chr_file, this);
}

resource mptctl_device_t inherits common_character_device {
    /// Serial Attached SCSI Management device.
    file_context("/dev/mpt[2-9]*ctl", chr_file, this);
}

resource mtrr_device_t inherits common_character_device {
    /// Memory type range register device, /dev/cpu/mtrr.
    file_context("/dev/cpu/mtrr", chr_file, this);
}
// TODO: I think this should be dropped
//genfscon proc /mtrr gen_contextsystem_u:object_r:mtrr_device_t:s0);
//optional_policy(`
//    init_mountpoint(mtrr_device_t)
//')

resource null_device_t inherits common_character_device {
    /// Null and full devices, /dev/null and /dev/full.

    file_context("/dev/full", chr_file, this);
    file_context("/dev/null", chr_file, this);

    // used by init scripts to initially populate udev /dev
    file_context("/usr/lib/udev/devices/null", chr_file, this);

    initial_context(devnull);
}
//mls_trusted_object(null_device_t)

resource nvram_device_t inherits common_character_device {
    /// Non-volatime RAM devices, /dev/nvram and /dev/ndctl*.
    // TODO: should these be system high or low?
    file_context("/dev/ndctl[0-9]", chr_file, this);
    file_context("/dev/nvram", chr_file, system_u:object_r:nvram_device_t:mls_systemhigh);
}

resource power_device_t inherits common_character_device {
    /// Power management unit devices, /dev/pmu and /dev/smu.
    file_context("/dev/pmu", chr_file, this);
    file_context("/dev/smu", chr_file, this);
}

@alias(netcontrol_device_t)
resource pmqos_device_t inherits common_character_device {
    /// Power management quality of service (PM QoS) devices.
    /// /dev/cpu_dma_latency, /dev/network_latency, /dev/network_throughput, and
    /// /dev/memory_bandwidth.
    file_context("/dev/memory_bandwidth", chr_file, this);
    file_context("/dev/network_latency", chr_file, this);
    file_context("/dev/network_throughput", chr_file, this);
    file_context("/dev/cpu_dma_latency", chr_file, this);
}

resource ppp_device_t inherits common_character_device {
    /// Point-to-Point Protocol (PPP) devices.
    file_context("/dev/ippp.*", chr_file, this);
    file_context("/dev/ppp", chr_file, this);
    file_context("/dev/pppox.*", chr_file, this);
    file_context("/usr/lib/udev/devices/ppp", chr_file, this);
}

resource printer_device_t inherits common_character_device {
    /// Printer devices.
    file_context("/dev/irlpt[0-9]+", chr_file, this);
    file_context("/dev/lp.*", chr_file, this);
    file_context("/dev/par.*", chr_file, this);
    file_context("/dev/usblp.*", chr_file, this);
    file_context("/dev/mfpports/.*", chr_file, this);
    file_context("/dev/usb/lp.*", chr_file, this);
    file_context("/usr/lib/udev/devices/lp.*", chr_file, this);
}
// TODO: mls_file_write_within_range(printer_device_t)

resource ptmx_t inherits common_character_device {
    /// Pseudo terminal (pty) multiplexer, /dev/ptmx.
    devpts_t.associate(this);

    file_context("/dev/ptmx", chr_file, this);

    // if /dev/ptmx is a symlink to /dev/pts/ptmx then we need to have /dev/pts/ptmx
    // relabelled before sshd etc are ready to accept connections
    file_context("/dev/pts/ptmx", chr_file, this);
}
// TODO: mls_trusted_object(ptmx_t)

//
// random_device_t is the type of /dev/random
//
resource random_device_t inherits common_character_device {
    /// Pseudorandom number generators, such as /dev/random and /dev/hwrng.
    file_context("/dev/hw_random", chr_file, this);
    file_context("/dev/hwrng", chr_file, this);
    file_context("/dev/random", chr_file, this);
}

resource removable_device_t inherits common_block_device {
    /// Removable storage devices.
    /// Accessing these devices should be avoided. By accessing the device,
    /// a domain can bypass SELinux access controls for filesystems.

    // TODO: These likely should be all MLS systemhigh.
    file_context("/dev/aztcd", blk_file, this);
    file_context("/dev/bpcd", blk_file, this);

    file_context("/dev/cdu.*", blk_file, this);
    file_context("/dev/cm20.*", blk_file, this);
    file_context("/dev/fd[^/]+", blk_file, this);
    file_context("/dev/gscd", blk_file, this);
    file_context("/dev/hitcd", blk_file, this);

    file_context("/dev/hwcdrom", blk_file, this);
    file_context("/dev/mcdx?", blk_file, this);
    file_context("/dev/megadev.*", chr_file, this);
    file_context("/dev/mmcblk.*", blk_file, this);
    file_context("/dev/mmcblk.*", chr_file, this);
    file_context("/dev/mspblk.*", blk_file, this);
    file_context("/dev/optcd", blk_file, this);
    file_context("/dev/p[fg][0-3]", blk_file, this);
    file_context("/dev/pcd[0-3]", blk_file, this);
    file_context("/dev/pd[a-d][^/]*", blk_file, this);
    file_context("/dev/pg[0-3]", chr_file, this);
    file_context("/dev/s(cd|r)[^/]*", blk_file, this);
    file_context("/dev/sbpcd.*", blk_file, this);

    file_context("/dev/sjcd", blk_file, this);
    file_context("/dev/sonycd", blk_file, this);

    file_context("/dev/ub[a-z][^/]+", blk_file, system_u:object_r:removable_device_t:mls_systemhigh);

    file_context("/dev/floppy/[^/]*", blk_file, this);

    file_context("/dev/usb/rio500", chr_file, this);
}

resource scanner_device_t inherits common_character_device {
    /// Scanner devices, such as /dev/usb/scanner*.

    file_context("/dev/mmetfgrab", chr_file, this);

    file_context("/dev/usb/dc2xx.*", chr_file, this);
    file_context("/dev/usb/mdc800.*", chr_file, this);
    file_context("/dev/usb/scanner.*", chr_file, this);
}

resource scsi_generic_device_t inherits common_character_device {
    /// SCSI generic devices, /dev/sg* and /dev/bsg/*.
    /// Accessing these devices should be avoided. By accessing the device,
    /// a domain can bypass SELinux access controls for filesystems.

    // TODO: This should likely be systemhigh
    file_context("/dev/bsg/.+", chr_file, this);

    file_context("/dev/sg[0-9]+", chr_file, this);
}
// TODO:
//neverallow ~{ scsi_generic_read storage_unconfined_type } scsi_generic_device_t:{ chr_file blk_file } read;
//neverallow ~{ scsi_generic_write storage_unconfined_type } scsi_generic_device_t:{ chr_file blk_file } { append write };

resource sound_device_t inherits common_character_device {
    /// Sound devices and mixers, such as /dev/audio* and /dev/sequencer.
    file_context("/dev/admmidi.*", chr_file, this);
    file_context("/dev/adsp.*", chr_file, this);
    file_context("/dev/audio.*", chr_file, this);
    file_context("/dev/aload.*", chr_file, this);
    file_context("/dev/amidi.*", chr_file, this);
    file_context("/dev/amixer.*", chr_file, this);
    file_context("/dev/beep", chr_file, this);
    file_context("/dev/dahdi/.*", chr_file, this);
    file_context("/dev/dmfm", chr_file, this);
    file_context("/dev/dmmidi.*", chr_file, this);
    file_context("/dev/dsp.*", chr_file, this);
    file_context("/dev/hfmodem", chr_file, this);
    file_context("/dev/midi.*", chr_file, this);
    file_context("/dev/mixer.*", chr_file, this);
    file_context("/dev/mpu401.*", chr_file, this);
    file_context("/dev/patmgr[01]", chr_file, this);
    file_context("/dev/rmidi.*", chr_file, this);
    file_context("/dev/sequencer", chr_file, this);
    file_context("/dev/sequencer2", chr_file, this);
    file_context("/dev/smpte.*", chr_file, this);
    file_context("/dev/srnd[0-7]", chr_file, this);
    file_context("/dev/s(ou)?nd/.*", chr_file, this);
    file_context("/dev/sndstat", chr_file, this);
}

resource sysdig_device_t inherits common_character_device {
    /// System and process troubleshooting device (sysdig), /dev/sysdig*.
    file_context("/dev/sysdig[0-9]", chr_file, this);
}

resource tape_device_t inherits common_character_device {
    /// Tape storage devices, such as /dev/tape*.
    // TODO: There is one block dev here.  Possibly should be systemhigh.
    file_context("/dev/n?(raw)?[qr]ft[0-3]", chr_file, this);
    file_context("/dev/n?[hs]t[0-9].*", chr_file, this);
    file_context("/dev/n?z?qft[0-3]", chr_file, this);
    file_context("/dev/n?osst[0-3].*", chr_file, this);
    file_context("/dev/n?pt[0-9]+", chr_file, this);
    file_context("/dev/n?tpqic[12].*", chr_file, this);

    file_context("/dev/ht[0-1]", blk_file, this);

    file_context("/dev/tape.*", chr_file, this);
}

resource tee_device_t inherits common_character_device {
    /// Trusted Execution Environment (TEE) client devices, /dev/tee*.
    file_context("/dev/tee[0-9]", chr_file, this);
}

resource tee_priv_device_t inherits common_character_device {
    /// Trusted Execution Environment (TEE) supplicant devices, /dev/teepriv*.
    file_context("/dev/teepriv[0-9]", chr_file, this);
}

resource tpm_device_t inherits common_character_device {
    /// Trusted Platform Module (TPM) devices, /dev/tpm* and /dev/tpmrm*.
    file_context("/dev/tpm[0-9]*", chr_file, this);
    file_context("/dev/tpmrm[0-9]*", chr_file, this);
}

resource tty_device_t inherits terminal, serial_device {
    /// TTY devices not allocated to users.

    file_context("/dev/.*tty[^/]*", chr_file, this);
    file_context("/dev/adb.*", chr_file, this);
    file_context("/dev/capi.*", chr_file, this);
    file_context("/dev/cu.*", chr_file, this);
    file_context("/dev/dcbri[0-9]+", chr_file, this);
    file_context("/dev/hpilo/[^/]*", chr_file, this);
    file_context("/dev/hvc.*", chr_file, this);
    file_context("/dev/hvsi.*", chr_file, this);
    file_context("/dev/i2c[^/]*", chr_file, this);
    file_context("/dev/ircomm[0-9]+", chr_file, this);
    file_context("/dev/ip2[^/]*", chr_file, this);
    file_context("/dev/isdn.*", chr_file, this);
    file_context("/dev/rfcomm[0-9]+", chr_file, this);
    file_context("/dev/slamr[0-9]+", chr_file, this);
    file_context("/dev/ttySG.*", chr_file, this);
    file_context("/dev/xvc[^/]*", chr_file, this);

    file_context("/dev/tts/[^/]*", chr_file, this);

    file_context("/dev/vcc?/.*", chr_file, this);

    file_context("/dev/vcs[^/]*", chr_file, this);

    file_context("/dev/xvc[0-9]*", chr_file, this);
}

resource tun_tap_device_t inherits common_character_device {
    /// TUN/TAP devices.
    file_context("/dev/tap.*", chr_file, this);
    file_context("/dev/net/.*", chr_file, this);
    file_context("/usr/lib/udev/devices/net/.*", chr_file, this);
}

resource uhid_device_t inherits common_character_device {
    /// User-space I/O driver support for HID subsystem, /dev/uhid.
    file_context("/dev/uhid", chr_file, this);
}

resource urandom_device_t inherits common_character_device {
    /// Pseudorandom number generator, /dev/urandom.
    file_context("/dev/urandom", chr_file, this);
}

resource usb_device_t inherits common_character_device {
    /// USB devices, such as /dev/bus/usb/*
    file_context("/dev/[0-9].*", chr_file, this);
    file_context("/dev/fw.*", chr_file, this);
    file_context("/dev/hiddev.*", chr_file, this);
    file_context("/dev/hidraw.*", chr_file, this);
    file_context("/dev/ub[a-c]", chr_file, this);
    file_context("/dev/usb.+", chr_file, this);
    file_context("/dev/bus/usb/.*/[0-9]+", chr_file, this);
}

resource usbmon_device_t inherits common_character_device {
    /// USB monitoring devices, /dev/usbmon*.
    file_context("/dev/usbmon.+", chr_file, this);
}

resource usbtty_device_t inherits serial_device {
    /// USB tty devices, /dev/usb/tty*.
    file_context("/dev/usb/tty.*", chr_file, this);
}

resource userio_device_t inherits common_character_device {
    /// Userspace I/O devices, /dev/uio*.
    file_context("/dev/uio[0-9]+", chr_file, this);
}

resource v4l_device_t inherits common_character_device {
    /// Video4Linux devices, such as /dev/video* and /dev/dvb/*.
    file_context("/dev/em8300.*", chr_file, this);
    file_context("/dev/radio.*", chr_file, this);
    file_context("/dev/raw1394.*", chr_file, this);
    file_context("/dev/sonypi", chr_file, this);
    file_context("/dev/tlk[0-3]", chr_file, this);
    file_context("/dev/vbi.*", chr_file, this);
    file_context("/dev/video.*", chr_file, this);
    file_context("/dev/vttuner", chr_file, this);
    file_context("/dev/vtx.*", chr_file, this);
    file_context("/dev/winradio.*", chr_file, this);
    file_context("/dev/dvb/.*", chr_file, this);
}

resource vfio_device_t inherits common_character_device {
    /// Virtual Function I/O (VFIO) devices, /dev/vfio/*.
    file_context("/dev/vfio/.+", chr_file, this);
}

resource virtio_device_t inherits serial_device {
    /// I/O virtualization devices, /dev/vport*.
    file_context("/dev/vport[0-9]p[0-9]+", chr_file, this);
}

// TODO: Merge vhost_device_t into virtio_device_t ?

resource vhost_device_t inherits common_character_device {
    /// Vhost devices like /dev/vhost-net and /dev/vhost-scsi.
    file_context("/dev/net/vhost", chr_file, this);
    file_context("/dev/vhci", chr_file, this);
    file_context("/dev/vhost-net", chr_file, this);
    file_context("/dev/vhost-scsi", chr_file, this);
    file_context("/dev/vhost-vsock", chr_file, this);
}

// TODO: Change vmnet into virtio_device_t ?

resource vmware_device_t inherits common_character_device {
    /// VMWare virtual machine monitor, /dev/vmmon, and virtual networks, /dev/vmnet*.
    file_context("/dev/vmmon", chr_file, this);
    file_context("/dev/vmnet.*", chr_file, this);
}

resource watchdog_device_t inherits common_character_device {
    /// Watchdog devices, /dev/watchdog*.
    file_context("/dev/watchdog.*", chr_file, this);
}

resource wireless_device_t inherits common_character_device {
    /// Wireless control devices, such as /dev/rfkill.
    file_context("/dev/rfkill", chr_file, this);
}

resource xen_device_t inherits common_character_device {
    /// Xen devices such as /dev/xen/*.

    file_context("/dev/evtchn", chr_file, this);

    file_context("/dev/xen/blktap.*", chr_file, this);
    file_context("/dev/xen/evtchn", chr_file, this);
    file_context("/dev/xen/gntdev", chr_file, this);
    file_context("/dev/xen/gntalloc", chr_file, this);
    file_context("/dev/xen/hypercall", chr_file, this);
    file_context("/dev/xen/privcmd", chr_file, this);
    file_context("/dev/xen/xenbus", chr_file, this);
    file_context("/dev/xen/xenbus_backend", chr_file, this);
}

resource xserver_misc_device_t inherits common_character_device {
    /// Miscellaneous X server devices.
    // TODO: This looks like most of them can move to dri_device_t.
    // TODO: /dev/vbox* are Virtualbox devices, not related to X. vboxdrv, vboxdrvu, vboxnetctl
    file_context("/dev/3dfx", chr_file, this);
    file_context("/dev/controlD64", chr_file, this);
    file_context("/dev/drm_dp_aux[0-9]*", chr_file, this);
    file_context("/dev/gfx", chr_file, this);
    file_context("/dev/graphics", chr_file, this);
    file_context("/dev/mga_vid.*", chr_file, this);
    file_context("/dev/nvidia.*", chr_file, this);
    file_context("/dev/opengl", chr_file, this);
    file_context("/dev/vbox.*", chr_file, this);
    file_context("/dev/vga_arbiter", chr_file, this);
    file_context("/dev/card.*", chr_file, this);
    file_context("/dev/mvideo/.*", chr_file, this);
}

resource zero_device_t inherits common_character_device {
    /// Zero device, /dev/zero.
    file_context("/dev/zero", chr_file, this);

    // used by init scripts to initially populate udev /dev
    file_context("/usr/lib/udev/devices/zero", chr_file, this);
}
// TODO: mls_trusted_object(zero_device_t)
