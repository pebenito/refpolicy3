// SPDX-License-Identifier: GPL-2.0

domain systemd_coredump_t inherits systemd_app_domain {
    /// Core dump handler.

    //
    // Resources
    //
    @alias(systemd_coredump_exec_t)
    extend exec  {
        file_context("/usr/bin/systemd-coredump", file, this);
        file_context("/usr/lib/systemd/systemd-coredump", file, this);
    }

    @alias(systemd_coredump_var_lib_t)
    resource state inherits common_file, systemd_tmpfiles_managed {
        file_context("/var/lib/systemd/coredump(/.*)?", any, this);
    }

    //
    // Policy
    //
    allow(this, self, capability, [ setgid setuid setpcap sys_ptrace ]);
    dontaudit(this, self, capability, net_admin);
    allow(this, self, cap_userns, [ sys_admin sys_ptrace ]);
    allow(this, self, process, setcap);

    this.state.mmap_manage(); var_lib_t.list(); var_t.list();

    bin_t.exec();

    cgroup_t.getattr_superblock();
    cgroup_t.list();

    default_context_t.list(); selinux_config_t.list();

    domain.ps();

    etc_t.read();

    executable.read();

    fs_t.getattr_superblock();

    init_t.ps();
    init_t.runtime.list();
    init_t.runtime<common_named_socket>.write();
    init_t.state.list();

    kernel_t.userspace_entrypoint();
    kernel_t.rw_inherited_pipes();

    kmsg_device_t.write();

    mountpoint<dir>.getattr();

    nsfs_t.getattr();

    proc_t.read();

    root_t.mounton();

    selinuxfs_t.getattr_superblock(); sysfs_t.getattr_superblock(); sysfs_t.list();

    sysctl_t.kernel.read(); sysctl_t.list(); proc_t.list();

    syslog.send_messages();
}
