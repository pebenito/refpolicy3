// SPDX-License-Identifier: GPL-2.0

domain ifconfig_t inherits system_app_domain {
    /// Network configuration tools (ifconfig, ip, etc. commands)

    //
    // Resources
    //
    @alias(ifconfig_exec_t)
    extend exec  {
        file_context("/usr/bin/ethtool", file, this);
        file_context("/usr/bin/ifconfig", file, this);
        file_context("/usr/bin/ip", file, this);
        file_context("/usr/bin/ipx_configure", file, this);
        file_context("/usr/bin/ipx_interface", file, this);
        file_context("/usr/bin/ipx_internal_net", file, this);
        file_context("/usr/bin/iw", file, this);
        file_context("/usr/bin/iwconfig", file, this);
        file_context("/usr/bin/mii-tool", file, this);
        file_context("/usr/bin/tc", file, this);
        file_context("/usr/sbin/ethtool", file, this);
        file_context("/usr/sbin/ifconfig", file, this);
        file_context("/usr/sbin/ip", file, this);
        file_context("/usr/sbin/ipx_configure", file, this);
        file_context("/usr/sbin/ipx_interface", file, this);
        file_context("/usr/sbin/ipx_internal_net", file, this);
        file_context("/usr/sbin/iw", file, this);
        file_context("/usr/sbin/iwconfig", file, this);
        file_context("/usr/sbin/mii-tool", file, this);
        file_context("/usr/sbin/tc", file, this);
    }

    @alias(ifconfig_runtime_t)
    resource runtime inherits runtimefile {
        /// Runtime files in /run and /var/run.
        file_context("/run/netns", dir, this);
        // TODO add back in when we figure out what to do with none
        // file_context("/run/netns/[^/]+", file, <<none>>);
//typeattribute ifconfig_runtime_t container_mountpoint_type;
    }

    //
    // Policy
    //

    allow(this, self, capability, [ net_admin net_raw sys_admin sys_tty_config ]);
    dontaudit(this, this, self, capability, sys_module);
    allow(this, self, process, [ transition setsched setpgid setcap share noatsecure siginh rlimitinh dyntransition setkeycreate setsockcreate getrlimit ]);
    // Create UDP sockets, necessary when called from dhcpc
    allow(this, self, udp_socket, manage_socket_perms);
    // for /sbin/ip
    allow(this, self, packet_socket, manage_socket_perms);
    // generic netlink socket for iw
    // socket(PF_NETLINK, SOCK_RAW|SOCK_CLOEXEC, NETLINK_GENERIC) = 3
    allow(this, self, netlink_socket, manage_socket_perms);
    allow(this, self, netlink_generic_socket, manage_socket_perms);
    allow(this, self, netlink_route_socket, [ manage_socket_perms nlmsg_read nlmsg_write ]);
    allow(this, self, netlink_xfrm_socket, [ manage_socket_perms nlmsg_read nlmsg_write ]);
    allow(this, self, tcp_socket, manage_stream_socket_perms);

    this.runtime.manage();
    runtime_t.filetrans(this, ifconfig_runtime_t, dir);
    // Allow "ip netns" to remount /var/run/netns and to mount network namespace files on /var/run/netns/$NSNAME
    this.runtime.mounton();

    autofs_t.list();

    cardmgr_dev_t.dontaudit_rw();

    console_device_t.dontaudit_rw();

    etc_t.read();

    etc_runtime_t.read();

    fs_t.getattr_superblock();

    ipsec_t.runtime.write();
    ipsec_spd_t.set_context();

    kernel.request_module_load();

    kernel_t.inherit_file_descriptors();

    kmod_t.domtrans();

    nfsd_fs_t.read();
    nfsd_fs_t.unmount();

    nss.get_hosts_entry();

    pppd_t.inherit_file_descriptors();

    proc_t.read();
    proc_t.net.read();

    root_t<common_file>.dontaudit_read();

    selinuxfs_t.dontaudit_getattr_superblock();

    sysctl_t.net.rw(); sysctl_t.list();

    sysfs_t.read();
    sysfs_t.dontaudit_getattr_superblock();

    syslog.send_messages();

    tun_tap_device_t.rw();

    udev_t.dontaudit_rw_inherited_dgram_sockets();

    // for IPSEC setup:
    urandom_device_t.read();

    // For "ip netns identify $$"
    userdomain.ps();

    vmware_log_t.append();

    optional {
        devicekit_t.runtime<common_file>.read();
        devicekit_t.log.append_inherited();
        devicekit_power_t.inherit_file_descriptors();
    }

    optional {
        proc_t.xen.rw();
        xend_t.log<common_file>.append();
        xend_t.log<common_file>.dontaudit_write();
        xend_t.dontaudit_rw_inherited_stream_sockets();
    }
}
